@page
@using DevExtreme.AspNet.Mvc
@using DevExtremeDemo2.Controllers
@using DevExtremeDemo2.Common.Extensions
@model DevExtremeDemo2.Areas.Demo.Pages.Form.Demo1

<div class="row mb-4">
    <p class="h3">Demo/Form/Overview</p>
    @{
        var routes = Model.RouteData.Values;
        <p class="mb-0">Area : @routes["area"]</p>
        <p class="mb-0">Page : @routes["page"]</p>
    }
    @* @string.Join(", ", Model.RouteData.Values) *@
</div>

<div id="form-demo" class="row gx-5">
    <div class="widget-container col-md-8 py-4 bg-info">
        <div id="companySelectText" class="mb-1">Select company:</div>
        <div class="mb-4">
        @(Html.DevExtreme()
            .SelectBox()
            .ID("companySelectBox")
            .DisplayExpr("Name")
            .Label("Select company")
            .LabelMode(EditorLabelMode.Floating)
            .DataSource(d => d
                .Mvc()
                .Controller<CompanyController>()
                .LoadAction(nameof(CompanyController.GetCompanies))
                .Key("ID")
            )
            .Value(1)
            .OnValueChanged("selectBox_valueChanged")
            )
        </div>
        @(Html.DevExtreme().Form()
            .ID("form")
            .ColCount(2)
            .FormData(Model.FirstActiveCompany)
            .LabelMode(FormLabelMode.Outside)
            .LabelLocation(FormLabelLocation.Top)
            .MinColWidth(300)
            .ReadOnly(false)
            .ShowColonAfterLabel(true)
            )
    </div>
    <div class="options col-md-4 bg-warning rounded-3 py-4">
        <div class="caption">Options</div>
        <div class="option">
            <span>Label mode:</span>
            @(Html.DevExtreme().SelectBox()
                .DataSource(new[] { "outside", "static", "floating", "hidden" })
                .Value("outside")
                .OnValueChanged("labelMode_changed")
                )
        </div>
        <div class="option">
            <span>Label location:</span>
            @(Html.DevExtreme().SelectBox()
                .DataSource(new[] { "left", "top" })
                .Value("left")
                .OnValueChanged("labelLocation_changed")
                )
        </div>
        <div class="option">
            <span>Columns count:</span>
            @(Html.DevExtreme().SelectBox()
                .DataSource(new object[] { "auto", 1, 2, 3 })
                .Value(2)
                .OnValueChanged("colCount_changed")
                )
        </div>
        <div class="option">
            <span>Min column width:</span>
            @(Html.DevExtreme().SelectBox()
                .DataSource(new[] { 150, 200, 300 })
                .Value(300)
                .OnValueChanged("minColWidth_changed")
                )
        </div>
        <div class="option">
            <span>Form width:</span>
            @(Html.DevExtreme().NumberBox()
                .Value(null)
                .Max(550)
                .OnValueChanged("formWidth_changed")
                )
        </div>
        <div class="option">
            @(Html.DevExtreme().CheckBox()
                .Text("readOnly")
                .Value(false)
                .OnValueChanged("readOnly_changed")
                )
        </div>
        <div class="option">
            @(Html.DevExtreme().CheckBox()
                .Text("showColonAfterLabel")
                .Value(true)
                .OnValueChanged("showColonAfterLabel_changed")
                )
        </div>
    </div>
</div>

<script>
    function getFormInstance() {
        return $("#form").dxForm("instance");
    }

    function selectBox_valueChanged(data) {
        getFormInstance().option("formData", data.value);
    }

    function labelMode_changed(data) {
        getFormInstance().option("labelMode", data.value);

        const $companySelectText = $("#companySelectText");
        const companySelectBox = $("#companySelectBox").dxSelectBox("instance");
        if(data.value === "outside") {
            companySelectBox.option("labelMode", "hidden");
            $companySelectText.show();
        } else {
            companySelectBox.option("labelMode", data.value);
            $companySelectText.hide();
        }
    }

    function labelLocation_changed(data) {
        getFormInstance().option("labelLocation", data.value);
    }

    function colCount_changed(data) {
        getFormInstance().option("colCount", data.value);
    }

    function minColWidth_changed(data) {
        getFormInstance().option("minColWidth", data.value);
    }

    function formWidth_changed(data) {
        getFormInstance().option("width", data.value);
    }

    function readOnly_changed(data) {
        getFormInstance().option("readOnly", data.value);
    }

    function showColonAfterLabel_changed(data) {
        getFormInstance().option("showColonAfterLabel", data.value);
    }
</script>